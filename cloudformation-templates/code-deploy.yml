AWSTemplateFormatVersion: "2010-09-09"
Description: AWS CodePipeline for Node Builds

Parameters:
  NamingPrefix:
    Type: String
    Description: The naming prefix for resources created by this template.
    Default: jimaweb

  InstanceKeyName:
    Description: Name of an existing EC2 KeyPair for SSH access to the relay nodes
    Type: AWS::EC2::KeyPair::KeyName
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: can contain only ASCII characters.

  GitHubToken:
    NoEcho: true
    Type: String
    Description: Github Token generated from

  GitHubRepoOwner:
    Type: String
    Description: Owner of the GitHub Repository

  GitHubRepoName:
    Type: String
    Description: Name of the GitHub Repository

  GitHubBranch:
    Type: String
    Description: Name of branch to use inside the GitHub Repository
    Default: master

  S3ArtifactStore:
    Type: String
    Description: S3 Bucket where artifacts will be stored
    
  LatestAmiId:
    Description: Gets the latest AMI from Systems Manager Parameter store
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open ports 22 and 8080
      GroupName: !Join
        - '-'
        - - !Ref NamingPrefix
          - Instance-SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '8080'
        ToPort: '8080'
        CidrIp: 0.0.0.0/0

  LoadbalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open port 80
      GroupName: !Join
        - '-'
        - - !Ref NamingPrefix
          - ELB-SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0

  EC2InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: EC2DeployPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action:
                  - "s3:Get*"
                  - "s3:List*"
                Resource: "*"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  EC2LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref EC2InstanceProfile
      InstanceType: t2.micro
      ImageId: !Ref LatestAmiId
      KeyName: !Ref InstanceKeyName
      LaunchConfigurationName: !Join [ '-' , [ !Ref GitHubRepoName, !Ref GitHubBranch, 'LaunchConfiguration' ] ]
      SecurityGroups:
      - Ref: InstanceSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            sudo yum -y update
            sudo yum install -y ruby
            sudo yum install -y aws-cli

            curl --silent --location https://rpm.nodesource.com/setup_14.x | sudo bash -
            sudo yum install -y nodejs

            cd /var
            mkdir jimaweb
            
            cd /home/ec2-user
            wget https://aws-codedeploy-ap-northeast-1.s3.amazonaws.com/latest/install
            chmod +x ./install
            ./install auto

  AutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref EC2LaunchConfiguration
      AvailabilityZones:
        Fn::GetAZs: "ap-northeast-1"
      MinSize: "1"
      MaxSize: "2"
      LoadBalancerNames:
        - !Ref LoadBalancer
      Tags:
        -
          Key: name
          Value: !Join [ '-' , [ !Ref GitHubRepoName, !Ref GitHubBranch ] ]
          PropagateAtLaunch: true

  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      AvailabilityZones:
        Fn::GetAZs: "ap-northeast-1"
      SecurityGroups: 
      - !GetAtt LoadbalancerSecurityGroup.GroupId
      Listeners:
      - LoadBalancerPort: '443'
        InstancePort: '8080'
        Protocol: HTTPS
        SSLCertificateId: "arn:aws:acm:ap-northeast-1:869229378759:certificate/031e7a97-d4ee-4efe-bb37-7fbbac064630"
      HealthCheck:
        HealthyThreshold: 2
        Interval: 30
        Target: HTTP:8080/
        Timeout: 5
        UnhealthyThreshold: 5

  CodeDeployTrustRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Sid: "1"
            Effect: Allow
            Principal:
              Service:
                - codedeploy.ap-northeast-1.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"

  CodeDeployRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodeDeployPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Resource: "*"
            Action:
              - ec2:Describe*
          - Effect: Allow
            Resource: "*"
            Action:
              - autoscaling:CompleteLifecycleAction
              - autoscaling:DeleteLifecycleHook
              - autoscaling:DescribeLifecycleHooks
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:PutLifecycleHook
              - autoscaling:RecordLifecycleActionHeartbeat
      Roles:
        - !Ref CodeDeployTrustRole

  DeployApplication:
    Type: "AWS::CodeDeploy::Application"
    Properties:
      ApplicationName: !Join [ '-' , [ !Ref GitHubRepoName, !Ref GitHubBranch ] ]

  DeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn: DeployApplication
    Properties:
      ApplicationName: !Ref DeployApplication
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      DeploymentGroupName: !Join [ '-' , [ !Ref GitHubRepoName, !Ref GitHubBranch ] ]
      Ec2TagFilters:
        - Key: name
          Value: !Join [ '-' , [ !Ref GitHubRepoName, !Ref GitHubBranch ] ]
          Type: KEY_AND_VALUE
      ServiceRoleArn: !GetAtt [CodeDeployTrustRole, Arn]

Outputs:
  URL:
    Description: URL of the website
    Value: !GetAtt LoadBalancer.DNSName
